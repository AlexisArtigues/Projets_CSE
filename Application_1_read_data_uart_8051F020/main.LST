C51 COMPILER V9.56.0.0   MAIN                                                              09/28/2018 15:38:53 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // Base_8051
   3          //------------------------------------------------------------------------------------
   4          //
   5          // AUTH: DF
   6          // DATE: 18-09-2017
   7          // Target: C8051F020
   8          //
   9          // Tool chain: KEIL UV4
  10          //
  11          // Application de base qui configure seulement l'oscillateur et le watchdog
  12          //-------------------------------------------------------------------------
  13          // Includes
  14          //------------------------------------------------------------------------------------
  15          #include "c8051f020.h" // SFR declarations
  16          #include <intrins.h>  
  17          #include <stdio.h>
  18          #include "init.h"
  19          
  20          sbit LED = P1^6; // Led verte embarqu�e sur la carte
  21          
  22          sbit RHT01 = P2^6; // Led verte embarqu�e sur la carte
  23          
  24          void fct_tempo(int duree_us);
  25          void clear_data_tab(char data_tab[],int dim);
  26          void send_tab_char_uart0(char car_tab[],int dim);
  27          void rht01_step1(void);
  28          void rht01_step2(void);
  29          void rht01_readvalue(void);
  30          unsigned int strlen(char *str);
  31          void send_char_uart0(char car);
  32          void reverse(char s[]);
  33          void itoa(int n, char s[]);
  34          
  35          void rht01_temperature_humidity_parser(char data_value[40]);
  36          
  37          unsigned int humidity_integral;
  38          unsigned int humidity_decimal;
  39          unsigned int temperature_integral;
  40          unsigned int temperture_decimal;
  41          unsigned int checksum;
  42          
  43          void rht01_step1(void){
  44   1        //P2MDOUT |= 0x40; // Push pull mode P2
  45   1        RHT01 = 0;
  46   1        fct_tempo(30000);
  47   1        RHT01 = 1;
  48   1        fct_tempo(20);
  49   1      }
  50           
  51          void rht01_step2(void){
  52   1         char read_value;
  53   1        while(read_value != 0){ // Att passage a 0
  54   2          read_value = RHT01;
  55   2        }
C51 COMPILER V9.56.0.0   MAIN                                                              09/28/2018 15:38:53 PAGE 2   

  56   1        while(read_value != 1){ // Att passage a 1
  57   2          read_value = RHT01;
  58   2        }
  59   1        while(read_value != 0){ // Att passage a 0
  60   2          read_value = RHT01;
  61   2        }
  62   1      }
  63          
  64          char rht01_read_bit_value(void){
  65   1        char read_value;
  66   1        char return_value;
  67   1        while(read_value != 1){ // Att passage a 1
  68   2          read_value = RHT01;
  69   2        }
  70   1        fct_tempo(50); 
  71   1        return_value = RHT01;
  72   1        while(read_value != 0){ // Att passage a 0
  73   2          read_value = RHT01;
  74   2        }
  75   1        return return_value;
  76   1      }
  77          
  78          void rht01_temperature_humidity_parser(char data_value[40]){
  79   1        char internal_counter = 0;
  80   1        humidity_integral =0;
  81   1        humidity_decimal = 0;
  82   1        temperature_integral = 0;
  83   1        temperture_decimal = 0;
  84   1        checksum = 0;
  85   1        while (internal_counter<8){
  86   2          humidity_integral <<= 1;
  87   2          humidity_integral += data_value[internal_counter]; 
  88   2          internal_counter++;
  89   2        }
  90   1        while (internal_counter<16){
  91   2          humidity_decimal <<= 1;
  92   2          humidity_decimal += data_value[internal_counter]; 
  93   2          internal_counter++;
  94   2        }
  95   1        while (internal_counter<24){
  96   2          temperature_integral <<= 1;
  97   2          temperature_integral += data_value[internal_counter]; 
  98   2          internal_counter++;
  99   2        }
 100   1       
 101   1        while (internal_counter<32){
 102   2          temperture_decimal <<= 1;
 103   2          temperture_decimal += data_value[internal_counter];
 104   2          internal_counter++;
 105   2        }
 106   1        while (internal_counter<40){
 107   2          checksum <<=1;
 108   2          checksum += data_value[internal_counter];
 109   2          internal_counter++;
 110   2        }
 111   1      
 112   1      }
 113          
 114          /* reverse:  reverse string s in place */
 115           void reverse(char s[])
 116           {
 117   1           int i, j;
C51 COMPILER V9.56.0.0   MAIN                                                              09/28/2018 15:38:53 PAGE 3   

 118   1           char c;
 119   1           for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 120   2               c = s[i];
 121   2               s[i] = s[j];
 122   2               s[j] = c;
 123   2           }
 124   1       }
 125           
 126           /* itoa:  convert n to characters in s */
 127           void itoa(int n, char s[])
 128           {
 129   1           int i, sign;
 130   1           if ((sign = n) < 0)  /* record sign */
 131   1               n = -n;          /* make n positive */
 132   1           i = 0;
 133   1           do {       /* generate digits in reverse order */
 134   2               s[i++] = n % 10 + '0';   /* get next digit */
 135   2           } while ((n /= 10) > 0);     /* delete it */
 136   1           if (sign < 0)
 137   1               s[i++] = '-';
 138   1           s[i] = '\0';
 139   1           reverse(s);
 140   1      }
 141          
 142          unsigned int strlen(char *str) {
 143   1        unsigned int i = 0;
 144   1        
 145   1        while (str[i] != '\0') {
 146   2        i++;
 147   2        }
 148   1        return i;
 149   1       }
 150          
 151          void clear_data_tab(char data_tab[],int dim){
 152   1        char i=0;
 153   1        for(i=0;i<dim;i++){
 154   2          data_tab[i] = 0 ; 
 155   2        }
 156   1      }
 157          
 158          void send_char_uart0(char car){
 159   1         TI0 = 0;
 160   1         SBUF0 = car;
 161   1         while (!TI0);
 162   1       }
 163          
 164          void send_tab_char_uart0(char car_tab[],int dim){
 165   1        unsigned char i = 0;
 166   1        for(i=0;i<dim;i++){
 167   2          send_char_uart0(car_tab[i]);
 168   2        }
 169   1       }
 170          
 171          //------------------------------------------------------------------------------------
 172          // MAIN Routine
 173          //------------------------------------------------------------------------------------
 174          void main (void)
 175          {
 176   1        char i = 0;
 177   1        char counter = 0;
 178   1        char rth_data_buffer[40];
 179   1        char temp_string[3];
C51 COMPILER V9.56.0.0   MAIN                                                              09/28/2018 15:38:53 PAGE 4   

 180   1        char humidity_string[3];
 181   1        Init_Device();
 182   1        P2MDOUT &= ~0x40;
 183   1        while(1){
 184   2          clear_data_tab(rth_data_buffer);
*** WARNING C209 IN LINE 184 OF main.c: '_clear_data_tab': too few actual parameters
 185   2          clear_data_tab(temp_string);
*** WARNING C209 IN LINE 185 OF main.c: '_clear_data_tab': too few actual parameters
 186   2          clear_data_tab(humidity_string);
*** WARNING C209 IN LINE 186 OF main.c: '_clear_data_tab': too few actual parameters
 187   2          rht01_step1();
 188   2          rht01_step2();
 189   2           counter = 0;
 190   2           while(counter<40){
 191   3            rth_data_buffer[counter] = rht01_read_bit_value();
 192   3            counter ++;
 193   3           }
 194   2           rht01_temperature_humidity_parser(rth_data_buffer);
 195   2           send_char_uart0('T');
 196   2           send_char_uart0(':');
 197   2           send_char_uart0(' ');
 198   2           itoa(temperature_integral,temp_string);
 199   2           send_tab_char_uart0(temp_string,3);
 200   2           send_char_uart0(' ');
 201   2           send_char_uart0('-');
 202   2           send_char_uart0(' ');
 203   2           send_char_uart0('H');
 204   2           send_char_uart0(' ');
 205   2           send_char_uart0(':');
 206   2           itoa(humidity_integral,humidity_string);
 207   2           send_tab_char_uart0(humidity_string,3);
 208   2           send_char_uart0('\r');
 209   2          for(i=0;i<100;i++){
 210   3            fct_tempo(10000);
 211   3          }
 212   2        }
 213   1      }
 214          
 215           
 216          
 217           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    983    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10      82
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
